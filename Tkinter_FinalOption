
import tkinter as tk
from tkinter import *
from tkinter import ttk


class createLabelFrame(ttk.Frame):
    def __init__(self,root):
        super().__init__(root)
        self.columnconfigure(0,weight=3)
        self._labelFrame_checkbutton()
    def _labelFrame_checkbutton(self):
        match_case = tk.StringVar()
        check = tk.StringVar()
        thirdstate = tk.StringVar()
        top_disable = tk.StringVar()
        #Top labelFrame
        top = ttk.LabelFrame(self,text="Checkbuttons")
        top.grid(column=0,row=0,sticky=tk.W)
        ttk.Checkbutton(top,text="Uncheck",variable=match_case,command=lambda:print(match_case.get())).grid(row=2,column=0,sticky=tk.W)
        ttk.Checkbutton(top,text="Check",variable=check,command=lambda:print(check.get())).grid(row=3,column=0,sticky=tk.W)
        ttk.Checkbutton(top,text="Thirdstate",variable=thirdstate,command=lambda:print(thirdstate.get())).grid(row=4,column=0,sticky=tk.W)
        ttk.Checkbutton(top,text="Disable",variable=top_disable,command=lambda:print(top_disable.get())).grid(row=5,column=0,sticky=tk.W)
        
        # Separator
        self.separator = ttk.Separator(self)
        self.separator.grid(row=1, column=0,  sticky="ew")

        # #Bot labelFrame
        bot = ttk.LabelFrame(self,text="Radiobuttons")
        bot.grid(column=0,row=6,sticky=tk.W)
        button =('Unselected','Selected','Disabled')
        select_radio = tk.StringVar()
        for i in button:
           r = ttk.Radiobutton(bot,text=i,variable=select_radio,value=i)
           r.grid(pady=1,padx=1,sticky=tk.W)

        separa = ttk.Separator(self, orient='horizontal')
        separa.grid(row=1,column=0,padx=(20,10),pady=10,sticky=tk.EW)

        for widget in self.winfo_children():#hàm chứa các widgets
            widget.grid(padx=20,pady=20)
    
class createInputWidget(ttk.Frame):
    def __init__(self,root):
        super().__init__(root)
        self.columnconfigure(0,weight=3)
        self.combo_list = ["Combobox", "Editable item 1", "Editable item 2"]
        self.readonly_combo_list = ["Readonly combobox", "Item 1", "Item 2"]
        self.option_menu_list = ["","OptionMenu", "Option 1", "Option 2"]
        self.value_option = tk.StringVar(value=self.option_menu_list[1])
        #creat widgetsFame
        self.widgets_frame = ttk.Frame(self)
        self.widgets_frame.grid(padx=20, pady=20, sticky="nsew")

        self._createWidget()
    def _createWidget(self):
        # Create Entry
        entryWidget = ttk.Entry(self.widgets_frame,width=15)
        entryWidget.insert(0,"Entry")
        entryWidget.grid(column=1,row=0,sticky=tk.EW)
        #create Spinbox
        spinboxWidget = ttk.Spinbox(self.widgets_frame,width=15,from_=-10,to=100,increment=1,wrap=True)
        spinboxWidget.insert(0,"SpinBox")
        spinboxWidget.grid(column=1,row=1,sticky="EW")
        #Combobox
        comboboxWidget = ttk.Combobox(self.widgets_frame,width=15,values=self.combo_list)
        comboboxWidget.insert(0,"Combobox")
        comboboxWidget.current(0)
        comboboxWidget.grid(column=1,row=2,sticky="ew")
        # ReadOnly Combobox
        readonly_combo = ttk.Combobox(self.widgets_frame,width=15,state="readonly",values=self.readonly_combo_list)
        readonly_combo.current(0)
        readonly_combo.grid(column=1,row=3,sticky="ew")
        #Menubutton
        self.menu = tk.Menu(self)
        self.menu.add_command(label="Menu item 1")
        self.menu.add_command(label="Menu item 2")
        self.menu.add_separator()
        self.menu.add_command(label="Menu item 3")
        self.menu.add_command(label="Menu item 4")

        self.menuButton = ttk.Menubutton(self.widgets_frame,text="Menu Button",menu=self.menu)
        self.menuButton.grid(column=1,row=4,sticky="ew")
        # Option Menu
        self.optionmenu = ttk.OptionMenu(self.widgets_frame,self.value_option,  *self.option_menu_list)
        self.optionmenu.grid(row=5, column=1, sticky="ew")
       
        #Button
        self.button = ttk.Button(self.widgets_frame,text="Button")
        self.button.grid(column=1,row=6,sticky="ew")
        # Accentbutton
        self.accentbutton = ttk.Button(self.widgets_frame, text="Accent button", style="Accent.TButton")
        self.accentbutton.grid(row=7, column=1, sticky="ew")
        # Togglebutton
        self.togglebutton = ttk.Checkbutton(self.widgets_frame, text="Toggle button", style="Toggle.TButton")
        self.togglebutton.grid(row=8, column=1, sticky="ew")
        # Switch
        self.switch = ttk.Checkbutton(self.widgets_frame, text="Switch", style="Switch.TCheckbutton")
        self.switch.grid(row=9, column=1, sticky="ew")

class Treeview_widget(ttk.Frame):
        def __init__(self,root):
            super().__init__(root)
            self.columnconfigure(0,weight=3)
            self.scaleValue = tk.DoubleVar(value=75.0)
            self._createWidget()
        def _createWidget(self):
            # Panedwindow
            self.paned = ttk.PanedWindow(self)
            self.paned.grid(row=0, column=2, pady=(25, 5), sticky="nsew", rowspan=3)

            # Pane #1
            self.pane_1 = ttk.Frame(self.paned, padding=5)
            self.paned.add(self.pane_1, weight=1)

            # Scrollbar
            self.scrollbar = ttk.Scrollbar(self.pane_1)
            self.scrollbar.pack(side="right", fill="y")

            # Treeview
            self.treeview = ttk.Treeview(
                self.pane_1,
                selectmode="browse",
                yscrollcommand=self.scrollbar.set,
                columns=(1, 2),
                height=10,
            )
            self.treeview.pack(expand=True, fill="both")
            self.scrollbar.config(command=self.treeview.yview)

            # Treeview columns
            self.treeview.column("#0", anchor="w", width=120)
            self.treeview.column(1, anchor="w", width=120)
            self.treeview.column(2, anchor="w", width=120)

            # Treeview headings
            self.treeview.heading("#0", text="Column 1", anchor="center")
            self.treeview.heading(1, text="Column 2", anchor="center")
            self.treeview.heading(2, text="Column 3", anchor="center")

            # Define treeview data
            treeview_data = [
                ("", 1, "Parent", ("Item 1", "Value 1")),
                (1, 2, "Child", ("Subitem 1.1", "Value 1.1")),
                (1, 3, "Child", ("Subitem 1.2", "Value 1.2")),
                (1, 4, "Child", ("Subitem 1.3", "Value 1.3")),
                (1, 5, "Child", ("Subitem 1.4", "Value 1.4")),
                ("", 6, "Parent", ("Item 2", "Value 2")),
                (6, 7, "Child", ("Subitem 2.1", "Value 2.1")),
                (6, 8, "Sub-parent", ("Subitem 2.2", "Value 2.2")),
                (8, 9, "Child", ("Subitem 2.2.1", "Value 2.2.1")),
                (8, 10, "Child", ("Subitem 2.2.2", "Value 2.2.2")),
                (8, 11, "Child", ("Subitem 2.2.3", "Value 2.2.3")),
                (6, 12, "Child", ("Subitem 2.3", "Value 2.3")),
                (6, 13, "Child", ("Subitem 2.4", "Value 2.4")),
                ("", 14, "Parent", ("Item 3", "Value 3")),
                (14, 15, "Child", ("Subitem 3.1", "Value 3.1")),
                (14, 16, "Child", ("Subitem 3.2", "Value 3.2")),
                (14, 17, "Child", ("Subitem 3.3", "Value 3.3")),
                (14, 18, "Child", ("Subitem 3.4", "Value 3.4")),
                ("", 19, "Parent", ("Item 4", "Value 4")),
                (19, 20, "Child", ("Subitem 4.1", "Value 4.1")),
                (19, 21, "Sub-parent", ("Subitem 4.2", "Value 4.2")),
                (21, 22, "Child", ("Subitem 4.2.1", "Value 4.2.1")),
                (21, 23, "Child", ("Subitem 4.2.2", "Value 4.2.2")),
                (21, 24, "Child", ("Subitem 4.2.3", "Value 4.2.3")),
                (19, 25, "Child", ("Subitem 4.3", "Value 4.3")),
            ]

            # Insert treeview data
            for item in treeview_data:
                self.treeview.insert(
                    parent=item[0], index="end", iid=item[1], text=item[2], values=item[3]
                )
                if item[0] == "" or item[1] in {8, 21}:
                    self.treeview.item(item[1], open=True)  # Open parents

            # Select and scroll
            self.treeview.selection_set(10)
            self.treeview.see(7)

            # Notebook, pane #2
            self.pane_2 = ttk.Frame(self.paned, padding=5)
            self.paned.add(self.pane_2, weight=3)

            # Notebook, pane #2
            self.notebook = ttk.Notebook(self.pane_2)
            self.notebook.pack(fill="both", expand=True)

            # Tab #1
            self.tab_1 = ttk.Frame(self.notebook)
            for index in [0, 1]:
                self.tab_1.columnconfigure(index=index, weight=1)
                self.tab_1.rowconfigure(index=index, weight=1)
            self.notebook.add(self.tab_1, text="Tab 1")

            # Scale
            self.scale = ttk.Scale(
                self.tab_1,
                from_=100,
                to=0,
                variable=self.scaleValue,
                command=lambda event: self.scaleValue.set(self.scale.get()),
            )
            self.scale.grid(row=0, column=0, padx=(20, 10), pady=(20, 0), sticky="ew")

            # Progressbar
            self.progress = ttk.Progressbar(
                self.tab_1, value=0, variable=self.scaleValue, mode="determinate"
            )
            self.progress.grid(row=0, column=1, padx=(10, 20), pady=(20, 0), sticky="ew")

            # Label
            self.label = ttk.Label(
                self.tab_1,
                text="Azure theme for ttk",
                justify="center",
                font=("-size", 15, "-weight", "bold"),
            )
            self.label.grid(row=1, column=0, pady=10, columnspan=2)

            # Tab #2
            self.tab_2 = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_2, text="Tab 2")

            # Tab #3
            self.tab_3 = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_3, text="Tab 3")

            # Sizegrip
            self.sizegrip = ttk.Sizegrip(self)
            self.sizegrip.grid(row=100, column=100, padx=(0, 5), pady=(0, 5))
class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.columnconfigure(0,weight=4)
        # Simply set the theme
        widgets = tk.Tk()
        widgets.tk.call("source", "F:/Python/azure/azure.tcl")
        widgets.tk.call("set_theme", "dark")
        pane = Frame(widgets)
        pane.pack(fill=BOTH,expand=True)
        widgets.update()
        widgets.minsize(widgets.winfo_width(), widgets.winfo_height())
        x_cordinate = int((widgets.winfo_screenwidth() / 2) - (widgets.winfo_width() / 2))
        y_cordinate = int((widgets.winfo_screenheight() / 2) - (widgets.winfo_height() / 2))
        widgets.geometry("+{}+{}".format(x_cordinate, y_cordinate-20))
        self._build()
    def _build(self):
        self.labelFrame = createLabelFrame(self)
        self.labelFrame.grid(column=0,row=0,sticky=tk.NSEW)
        self.createwidget = createInputWidget(self)
        self.createwidget.grid(column=1,row=0,sticky="NSEW")
        self.treeviwerWidget = Treeview_widget(self)
        self.treeviwerWidget.grid(column=2,row=0,sticky="NSEW")
if __name__ =="__main__":
    app = App()
    app.mainloop()
